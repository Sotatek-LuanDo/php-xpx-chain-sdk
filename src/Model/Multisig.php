<?php
/**
 * NIS2 API
 *
 * This document defines all the nis2 api routes and behaviour
 *
 * OpenAPI spec version: 1.0.0
 * Contact: greg@evias.be
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 * 
 */

namespace NEM\Model;

use \ArrayAccess;
use \NEM\ObjectSerializer;

/**
 * Multisig Class Doc Comment
 *
 * @category Class
 * @package  NEM
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Multisig implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Multisig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account' => 'string',
        'minApproval' => 'int',
        'minRemoval' => 'int',
        'cosignatories' => 'string[]',
        'multisigAccounts' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account' => null,
        'minApproval' => null,
        'minRemoval' => null,
        'cosignatories' => null,
        'multisigAccounts' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account' => 'account',
        'minApproval' => 'minApproval',
        'minRemoval' => 'minRemoval',
        'cosignatories' => 'cosignatories',
        'multisigAccounts' => 'multisigAccounts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account' => 'setAccount',
        'minApproval' => 'setMinApproval',
        'minRemoval' => 'setMinRemoval',
        'cosignatories' => 'setCosignatories',
        'multisigAccounts' => 'setMultisigAccounts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account' => 'getAccount',
        'minApproval' => 'getMinApproval',
        'minRemoval' => 'getMinRemoval',
        'cosignatories' => 'getCosignatories',
        'multisigAccounts' => 'getMultisigAccounts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account'] = isset($data['account']) ? $data['account'] : null;
        $this->container['minApproval'] = isset($data['minApproval']) ? $data['minApproval'] : null;
        $this->container['minRemoval'] = isset($data['minRemoval']) ? $data['minRemoval'] : null;
        $this->container['cosignatories'] = isset($data['cosignatories']) ? $data['cosignatories'] : null;
        $this->container['multisigAccounts'] = isset($data['multisigAccounts']) ? $data['multisigAccounts'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['account'] === null) {
            $invalidProperties[] = "'account' can't be null";
        }
        if ($this->container['minApproval'] === null) {
            $invalidProperties[] = "'minApproval' can't be null";
        }
        if ($this->container['minRemoval'] === null) {
            $invalidProperties[] = "'minRemoval' can't be null";
        }
        if ($this->container['cosignatories'] === null) {
            $invalidProperties[] = "'cosignatories' can't be null";
        }
        if ($this->container['multisigAccounts'] === null) {
            $invalidProperties[] = "'multisigAccounts' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['account'] === null) {
            return false;
        }
        if ($this->container['minApproval'] === null) {
            return false;
        }
        if ($this->container['minRemoval'] === null) {
            return false;
        }
        if ($this->container['cosignatories'] === null) {
            return false;
        }
        if ($this->container['multisigAccounts'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets account
     *
     * @return string
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param string $account account
     *
     * @return $this
     */
    public function setAccount($account)
    {
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets minApproval
     *
     * @return int
     */
    public function getMinApproval()
    {
        return $this->container['minApproval'];
    }

    /**
     * Sets minApproval
     *
     * @param int $minApproval minApproval
     *
     * @return $this
     */
    public function setMinApproval($minApproval)
    {
        $this->container['minApproval'] = $minApproval;

        return $this;
    }

    /**
     * Gets minRemoval
     *
     * @return int
     */
    public function getMinRemoval()
    {
        return $this->container['minRemoval'];
    }

    /**
     * Sets minRemoval
     *
     * @param int $minRemoval minRemoval
     *
     * @return $this
     */
    public function setMinRemoval($minRemoval)
    {
        $this->container['minRemoval'] = $minRemoval;

        return $this;
    }

    /**
     * Gets cosignatories
     *
     * @return string[]
     */
    public function getCosignatories()
    {
        return $this->container['cosignatories'];
    }

    /**
     * Sets cosignatories
     *
     * @param string[] $cosignatories cosignatories
     *
     * @return $this
     */
    public function setCosignatories($cosignatories)
    {
        $this->container['cosignatories'] = $cosignatories;

        return $this;
    }

    /**
     * Gets multisigAccounts
     *
     * @return string[]
     */
    public function getMultisigAccounts()
    {
        return $this->container['multisigAccounts'];
    }

    /**
     * Sets multisigAccounts
     *
     * @param string[] $multisigAccounts multisigAccounts
     *
     * @return $this
     */
    public function setMultisigAccounts($multisigAccounts)
    {
        $this->container['multisigAccounts'] = $multisigAccounts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


