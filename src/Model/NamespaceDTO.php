<?php
/**
 * NIS2 API
 *
 * This document defines all the nis2 api routes and behaviour
 *
 * OpenAPI spec version: 1.0.0
 * Contact: greg@evias.be
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 * 
 */

namespace NEM\Model;

use \ArrayAccess;
use \NEM\ObjectSerializer;

/**
 * NamespaceDTO Class Doc Comment
 *
 * @category Class
 * @package  NEM
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NamespaceDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'NamespaceDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'type' => 'int',
        'depth' => 'int',
        'level0' => '\NEM\Model\UInt64DTO',
        'level1' => '\NEM\Model\UInt64DTO',
        'level2' => '\NEM\Model\UInt64DTO',
        'parentId' => '\NEM\Model\UInt64DTO',
        'owner' => 'string',
        'startHeight' => '\NEM\Model\UInt64DTO',
        'endHeight' => '\NEM\Model\UInt64DTO'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'type' => null,
        'depth' => null,
        'level0' => null,
        'level1' => null,
        'level2' => null,
        'parentId' => null,
        'owner' => null,
        'startHeight' => null,
        'endHeight' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'depth' => 'depth',
        'level0' => 'level0',
        'level1' => 'level1',
        'level2' => 'level2',
        'parentId' => 'parentId',
        'owner' => 'owner',
        'startHeight' => 'startHeight',
        'endHeight' => 'endHeight'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'depth' => 'setDepth',
        'level0' => 'setLevel0',
        'level1' => 'setLevel1',
        'level2' => 'setLevel2',
        'parentId' => 'setParentId',
        'owner' => 'setOwner',
        'startHeight' => 'setStartHeight',
        'endHeight' => 'setEndHeight'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'depth' => 'getDepth',
        'level0' => 'getLevel0',
        'level1' => 'getLevel1',
        'level2' => 'getLevel2',
        'parentId' => 'getParentId',
        'owner' => 'getOwner',
        'startHeight' => 'getStartHeight',
        'endHeight' => 'getEndHeight'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['depth'] = isset($data['depth']) ? $data['depth'] : null;
        $this->container['level0'] = isset($data['level0']) ? $data['level0'] : null;
        $this->container['level1'] = isset($data['level1']) ? $data['level1'] : null;
        $this->container['level2'] = isset($data['level2']) ? $data['level2'] : null;
        $this->container['parentId'] = isset($data['parentId']) ? $data['parentId'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['startHeight'] = isset($data['startHeight']) ? $data['startHeight'] : null;
        $this->container['endHeight'] = isset($data['endHeight']) ? $data['endHeight'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['depth'] === null) {
            $invalidProperties[] = "'depth' can't be null";
        }
        if ($this->container['level0'] === null) {
            $invalidProperties[] = "'level0' can't be null";
        }
        if ($this->container['parentId'] === null) {
            $invalidProperties[] = "'parentId' can't be null";
        }
        if ($this->container['owner'] === null) {
            $invalidProperties[] = "'owner' can't be null";
        }
        if ($this->container['startHeight'] === null) {
            $invalidProperties[] = "'startHeight' can't be null";
        }
        if ($this->container['endHeight'] === null) {
            $invalidProperties[] = "'endHeight' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['type'] === null) {
            return false;
        }
        if ($this->container['depth'] === null) {
            return false;
        }
        if ($this->container['level0'] === null) {
            return false;
        }
        if ($this->container['parentId'] === null) {
            return false;
        }
        if ($this->container['owner'] === null) {
            return false;
        }
        if ($this->container['startHeight'] === null) {
            return false;
        }
        if ($this->container['endHeight'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets type
     *
     * @return int
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param int $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets depth
     *
     * @return int
     */
    public function getDepth()
    {
        return $this->container['depth'];
    }

    /**
     * Sets depth
     *
     * @param int $depth depth
     *
     * @return $this
     */
    public function setDepth($depth)
    {
        $this->container['depth'] = $depth;

        return $this;
    }

    /**
     * Gets level0
     *
     * @return \NEM\Model\UInt64DTO
     */
    public function getLevel0()
    {
        return $this->container['level0'];
    }

    /**
     * Sets level0
     *
     * @param \NEM\Model\UInt64DTO $level0 level0
     *
     * @return $this
     */
    public function setLevel0($level0)
    {
        $this->container['level0'] = $level0;

        return $this;
    }

    /**
     * Gets level1
     *
     * @return \NEM\Model\UInt64DTO
     */
    public function getLevel1()
    {
        return $this->container['level1'];
    }

    /**
     * Sets level1
     *
     * @param \NEM\Model\UInt64DTO $level1 level1
     *
     * @return $this
     */
    public function setLevel1($level1)
    {
        $this->container['level1'] = $level1;

        return $this;
    }

    /**
     * Gets level2
     *
     * @return \NEM\Model\UInt64DTO
     */
    public function getLevel2()
    {
        return $this->container['level2'];
    }

    /**
     * Sets level2
     *
     * @param \NEM\Model\UInt64DTO $level2 level2
     *
     * @return $this
     */
    public function setLevel2($level2)
    {
        $this->container['level2'] = $level2;

        return $this;
    }

    /**
     * Gets parentId
     *
     * @return \NEM\Model\UInt64DTO
     */
    public function getParentId()
    {
        return $this->container['parentId'];
    }

    /**
     * Sets parentId
     *
     * @param \NEM\Model\UInt64DTO $parentId parentId
     *
     * @return $this
     */
    public function setParentId($parentId)
    {
        $this->container['parentId'] = $parentId;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return string
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param string $owner owner
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets startHeight
     *
     * @return \NEM\Model\UInt64DTO
     */
    public function getStartHeight()
    {
        return $this->container['startHeight'];
    }

    /**
     * Sets startHeight
     *
     * @param \NEM\Model\UInt64DTO $startHeight startHeight
     *
     * @return $this
     */
    public function setStartHeight($startHeight)
    {
        $this->container['startHeight'] = $startHeight;

        return $this;
    }

    /**
     * Gets endHeight
     *
     * @return \NEM\Model\UInt64DTO
     */
    public function getEndHeight()
    {
        return $this->container['endHeight'];
    }

    /**
     * Sets endHeight
     *
     * @param \NEM\Model\UInt64DTO $endHeight endHeight
     *
     * @return $this
     */
    public function setEndHeight($endHeight)
    {
        $this->container['endHeight'] = $endHeight;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


