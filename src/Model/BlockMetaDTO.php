<?php
/**
 * NIS2 API
 *
 * This document defines all the nis2 api routes and behaviour
 *
 * OpenAPI spec version: 1.0.0
 * Contact: greg@evias.be
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 * 
 */

namespace NEM\Model;

use \ArrayAccess;
use \NEM\ObjectSerializer;

/**
 * BlockMetaDTO Class Doc Comment
 *
 * @category Class
 * @package  NEM
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BlockMetaDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BlockMetaDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'hash' => 'string',
        'generationHash' => 'string',
        'totalFee' => '\NEM\Model\UInt64DTO',
        'numTransactions' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'hash' => null,
        'generationHash' => null,
        'totalFee' => null,
        'numTransactions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'hash' => 'hash',
        'generationHash' => 'generationHash',
        'totalFee' => 'totalFee',
        'numTransactions' => 'numTransactions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'hash' => 'setHash',
        'generationHash' => 'setGenerationHash',
        'totalFee' => 'setTotalFee',
        'numTransactions' => 'setNumTransactions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'hash' => 'getHash',
        'generationHash' => 'getGenerationHash',
        'totalFee' => 'getTotalFee',
        'numTransactions' => 'getNumTransactions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['hash'] = isset($data['hash']) ? $data['hash'] : null;
        $this->container['generationHash'] = isset($data['generationHash']) ? $data['generationHash'] : null;
        $this->container['totalFee'] = isset($data['totalFee']) ? $data['totalFee'] : null;
        $this->container['numTransactions'] = isset($data['numTransactions']) ? $data['numTransactions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['hash'] === null) {
            $invalidProperties[] = "'hash' can't be null";
        }
        if ($this->container['generationHash'] === null) {
            $invalidProperties[] = "'generationHash' can't be null";
        }
        if ($this->container['totalFee'] === null) {
            $invalidProperties[] = "'totalFee' can't be null";
        }
        if ($this->container['numTransactions'] === null) {
            $invalidProperties[] = "'numTransactions' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['hash'] === null) {
            return false;
        }
        if ($this->container['generationHash'] === null) {
            return false;
        }
        if ($this->container['totalFee'] === null) {
            return false;
        }
        if ($this->container['numTransactions'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets hash
     *
     * @return string
     */
    public function getHash()
    {
        return $this->container['hash'];
    }

    /**
     * Sets hash
     *
     * @param string $hash hash
     *
     * @return $this
     */
    public function setHash($hash)
    {
        $this->container['hash'] = $hash;

        return $this;
    }

    /**
     * Gets generationHash
     *
     * @return string
     */
    public function getGenerationHash()
    {
        return $this->container['generationHash'];
    }

    /**
     * Sets generationHash
     *
     * @param string $generationHash generationHash
     *
     * @return $this
     */
    public function setGenerationHash($generationHash)
    {
        $this->container['generationHash'] = $generationHash;

        return $this;
    }

    /**
     * Gets totalFee
     *
     * @return \NEM\Model\UInt64DTO
     */
    public function getTotalFee()
    {
        return $this->container['totalFee'];
    }

    /**
     * Sets totalFee
     *
     * @param \NEM\Model\UInt64DTO $totalFee totalFee
     *
     * @return $this
     */
    public function setTotalFee($totalFee)
    {
        $this->container['totalFee'] = $totalFee;

        return $this;
    }

    /**
     * Gets numTransactions
     *
     * @return float
     */
    public function getNumTransactions()
    {
        return $this->container['numTransactions'];
    }

    /**
     * Sets numTransactions
     *
     * @param float $numTransactions numTransactions
     *
     * @return $this
     */
    public function setNumTransactions($numTransactions)
    {
        $this->container['numTransactions'] = $numTransactions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


