<?php
/**
 * NIS2 API
 *
 * This document defines all the nis2 api routes and behaviour
 *
 * OpenAPI spec version: 1.0.0
 * Contact: greg@evias.be
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 * 
 */

namespace NEM\Model\Transaction;

use NEM\Model\TransactionType;
use NEM\Model\Deadline;
use NEM\Model\TransactionVersion;
use NEM\Model\TransactionInfo;
use NEM\Model\PublicAccount;
use NEM\Infrastructure\Network;
use NEM\Model\Transaction\Schema\AggregateTransactionSchema;
use \Google\FlatBuffers\FlatbufferBuilder;
use \Catapult\Buffers\MessageBuffer;
use \Catapult\Buffers\MosaicBuffer;
use \Catapult\Buffers\AggregateTransactionBuffer;
use NEM\Utils\Utils;
use NEM\Model\AbstractTransaction;

/**
 * AggregateTransaction class Doc Comment
 *
 * @category class
 * @package  NEM
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AggregateTransaction extends \NEM\Model\Transaction{

    private $innerTransactions;
     
    public function __construct($deadline, $innerTransactions, $networkType){
        $version = "";
        $type = "";
        if (is_string($networkType) && in_array(strtolower($networkType), ["mijin", "mijintest", "public", "publictest", "private", "privatetest", "NotSupportedNet", "aliasaddress"])){
            $networkType = Network::$networkInfos[strtolower($networkType)]["id"];
        }
        else if (is_numeric($networkType) && !in_array($networkType, [96, 144, 184, 168, 200, 176, 0, 145])) {
            throw new NISInvalidNetworkId("Invalid netword ID '" . $networkType . "'");
        } 
        $maxFee = array(0,0);
        $signature = ""; 
        $signer = new PublicAccount;
        $transactionInfo = new TransactionInfo;

        $abstractTransaction = new AbstractTransaction($transactionInfo,$deadline,$networkType,
                                                    $type,$version,$maxFee,$signature,$signer);
        $this->setAbstractTransaction($abstractTransaction);
        $this->innerTransactions = $innerTransactions;
    }

    public function createBonded(){
        $this->getAbstractTransaction()->setVersion(TransactionVersion::AGGREGATE_BONDED_VERSION);
        $this->getAbstractTransaction()->setType(hexdec(TransactionType::AGGREGATE_BONDED));
    }
    public function createCompleted(){
        $this->getAbstractTransaction()->setVersion(TransactionVersion::AGGREGATE_COMPLETED_VERSION);
        $this->getAbstractTransaction()->setType(hexdec(TransactionType::AGGREGATE_COMPLETED));
    }
    public function generateBytes() {
        $networkType = $this->getAbstractTransaction()->getNetworkType();
        $version = $this->getAbstractTransaction()->getVersion();
        $deadline = $this->getAbstractTransaction()->getDeadline();
        $signature = $this->getAbstractTransaction()->getSignature();
        $signer = $this->getAbstractTransaction()->getSigner();
        $maxFee = $this->getAbstractTransaction()->getMaxFee();
        $type = $this->getAbstractTransaction()->getType();

        $innerTransactions = $this->innerTransactions;

        $builder = new FlatbufferBuilder(1);

        // Create transactionsBytes
        $transactionsBytes = array();
        for ($i=0;$i<count($innerTransactions);$i++) {
            $transactionBytes = $innerTransactions[$i]->toAggregateTransactionBytes();
            $transactionsBytes = array_merge($transactionsBytes, $transactionBytes);
        }

        $v = ($networkType << 8) + $version;
        // Create Vectors
        $signatureVector = AggregateTransactionBuffer::createSignatureVector($builder, (new Utils)->createArrayZero(64));
        $signerVector = AggregateTransactionBuffer::createSignerVector($builder, (new Utils)->createArrayZero(32));
        $deadlineVector = AggregateTransactionBuffer::createDeadlineVector($builder, $deadline->getTimeArray());
        $feeVector = AggregateTransactionBuffer::createFeeVector($builder, $maxFee);
        $transactionsVector = AggregateTransactionBuffer::createTransactionsVector($builder, $transactionsBytes);

        
        AggregateTransactionBuffer::startAggregateTransactionBuffer($builder);
        AggregateTransactionBuffer::addSize($builder, 120 + 4 + count($transactionsBytes));
        AggregateTransactionBuffer::addSignature($builder, $signatureVector);
        AggregateTransactionBuffer::addSigner($builder, $signerVector);
        AggregateTransactionBuffer::addVersion($builder, $v);
        AggregateTransactionBuffer::addType($builder, $type);
        AggregateTransactionBuffer::addFee($builder, $feeVector);
        AggregateTransactionBuffer::addDeadline($builder, $deadlineVector);

        AggregateTransactionBuffer::addTransactionsSize($builder, count($transactionsBytes));
        AggregateTransactionBuffer::addTransactions($builder, $transactionsVector);

        $codedTransaction = AggregateTransactionBuffer::endAggregateTransactionBuffer($builder);
        $builder->finish($codedTransaction);
        $AggregateTransactionSchema = new AggregateTransactionSchema;
        $tmp = unpack("C*",$builder->sizedByteArray());
        $builder_byte = array_slice($tmp,0,count($tmp));
        $output = $AggregateTransactionSchema->serialize($builder_byte);
        return $output;
    }
}
?>