<?php
/**
 * NIS2 API
 *
 * This document defines all the nis2 api routes and behaviour
 *
 * OpenAPI spec version: 1.0.0
 * Contact: greg@evias.be
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 * 
 */

namespace Proximax\Model\Transaction;

use Proximax\Model\TransactionType;
use Proximax\Model\Deadline;
use Proximax\Model\TransactionVersion;
use Proximax\Model\TransactionInfo;
use Proximax\Model\PublicAccount;
use Proximax\Infrastructure\Network;
use Proximax\Model\Transaction\Schema\AccountLinkTransactionSchema;
use \Google\FlatBuffers\FlatbufferBuilder;
use \Catapult\Buffers\AccountLinkTransactionBuffer;
use Proximax\Utils\Utils;
use Proximax\Model\AbstractTransaction;

/**
 * AccountLinkTransaction class Doc Comment
 *
 * @category class
 * @package  Proximax
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccountLinkTransaction extends \Proximax\Model\Transaction{

    private $remoteAccount; //PublicAccount 

    private $linkAction; //LinkActionEnum
     
    public function __construct($deadline, $remoteAccount, $linkAction, $networkType){
        $version = TransactionVersion::LINK_ACCOUNT_VERSION;
        $type = hexdec(TransactionType::LINK_ACCOUNT);
        if (is_string($networkType) && in_array(strtolower($networkType), ["mijin", "mijintest", "public", "publictest", "private", "privatetest", "NotSupportedNet", "aliasaddress"])){
            $networkType = Network::$networkInfos[strtolower($networkType)]["id"];
        }
        else if (is_numeric($networkType) && !in_array($networkType, [96, 144, 184, 168, 200, 176, 0, 145])) {
            throw new NISInvalidNetworkId("Invalid netword ID '" . $networkType . "'");
        } 
        $maxFee = array(0,0);
        $signature = ""; 
        $signer = new PublicAccount;
        $transactionInfo = new TransactionInfo;

        $abstractTransaction = new AbstractTransaction($transactionInfo,$deadline,$networkType,
                                                    $type,$version,$maxFee,$signature,$signer);
        $this->setAbstractTransaction($abstractTransaction);
        $this->remoteAccount = $remoteAccount;
        $this->linkAction = $linkAction;

        return $this;
    }

    public function generateBytes() {
        $networkType = $this->getAbstractTransaction()->getNetworkType();
        $version = $this->getAbstractTransaction()->getVersion();
        $deadline = $this->getAbstractTransaction()->getDeadline();
        $signature = $this->getAbstractTransaction()->getSignature();
        $signer = $this->getAbstractTransaction()->getSigner();
        $maxFee = $this->getAbstractTransaction()->getMaxFee();
        $type = $this->getAbstractTransaction()->getType();

        $remoteAccount = $this->remoteAccount;
        $linkAction = $this->linkAction;

        $builder = new FlatbufferBuilder(1);
        $remoteAccountPublicKey = (new Utils)->HexDecodeStringOdd($remoteAccount->getPublicKey());
        $v = ($networkType << 24) + $version;
        // Create Vectors
        $signatureVector = AccountLinkTransactionBuffer::createSignatureVector($builder, (new Utils)->createArrayZero(64));
        $signerVector = AccountLinkTransactionBuffer::createSignerVector($builder, (new Utils)->createArrayZero(32));
        $deadlineVector = AccountLinkTransactionBuffer::createDeadlineVector($builder, $deadline->getTimeArray());
        $feeVector = AccountLinkTransactionBuffer::createMaxFeeVector($builder, $maxFee);

        $remoteAccountVector = AccountLinkTransactionBuffer::createRemoteAccountKeyVector($builder,$remoteAccountPublicKey);
      
        // header, 2 uint64 and int
        $size = self::HEADER_SIZE + 32 + 1;

        AccountLinkTransactionBuffer::startAccountLinkTransactionBuffer($builder);
        AccountLinkTransactionBuffer::addSize($builder, $size);
        AccountLinkTransactionBuffer::addSignature($builder, $signatureVector);
        AccountLinkTransactionBuffer::addSigner($builder, $signerVector);
        AccountLinkTransactionBuffer::addVersion($builder, $v);
        AccountLinkTransactionBuffer::addType($builder, $type);
        AccountLinkTransactionBuffer::addMaxFee($builder, $feeVector);
        AccountLinkTransactionBuffer::addDeadline($builder, $deadlineVector);

        AccountLinkTransactionBuffer::addRemoteAccountKey($builder, $remoteAccountVector);
        AccountLinkTransactionBuffer::addLinkAction($builder, $linkAction);

        $codedTransaction = AccountLinkTransactionBuffer::endAccountLinkTransactionBuffer($builder);
        $builder->finish($codedTransaction);
        $AccountLinkTransactionSchema = new AccountLinkTransactionSchema;
        $tmp = unpack("C*",$builder->sizedByteArray());
        $builder_byte = array_slice($tmp,0,count($tmp));
        $output = $AccountLinkTransactionSchema->serialize($builder_byte);
        return $output;
    }
}
?>