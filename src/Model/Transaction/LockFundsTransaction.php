<?php
/**
 * NIS2 API
 *
 * This document defines all the nis2 api routes and behaviour
 *
 * OpenAPI spec version: 1.0.0
 * Contact: greg@evias.be
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 * 
 */

namespace Proximax\Model\Transaction;

use Proximax\Model\TransactionType;
use Proximax\Model\Deadline;
use Proximax\Model\TransactionVersion;
use Proximax\Model\TransactionInfo;
use Proximax\Model\PublicAccount;
use Proximax\Utils\Hex;
use Proximax\Infrastructure\Network;
use Proximax\Model\Transaction\Schema\LockFundsTransactionSchema;
use \Google\FlatBuffers\FlatbufferBuilder;
use \Catapult\Buffers\MessageBuffer;
use \Catapult\Buffers\MosaicBuffer;
use \Catapult\Buffers\LockFundsTransactionBuffer;
use Proximax\Utils\Utils;
use Proximax\Model\AbstractTransaction;

/**
 * LockFundsTransaction class Doc Comment
 *
 * @category class
 * @package  Proximax
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LockFundsTransaction extends \Proximax\Model\Transaction{

    private $mosaic;

    private $duration;

    private $signedTransaction;
     
    public function __construct($deadline, $mosaic, $duration, $signedTransaction ,$networkType){
        $version = TransactionVersion::LOCK_VERSION;
        $type = hexdec(TransactionType::LOCK);
        if (is_string($networkType) && in_array(strtolower($networkType), ["mijin", "mijintest", "public", "publictest", "private", "privatetest", "NotSupportedNet", "aliasaddress"])){
            $networkType = Network::$networkInfos[strtolower($networkType)]["id"];
        }
        else if (is_numeric($networkType) && !in_array($networkType, [96, 144, 184, 168, 200, 176, 0, 145])) {
            throw new NISInvalidNetworkId("Invalid netword ID '" . $networkType . "'");
        } 
        $maxFee = array(0,0);
        $signature = ""; 
        $signer = new PublicAccount;
        $transactionInfo = new TransactionInfo;

        $abstractTransaction = new AbstractTransaction($transactionInfo,$deadline,$networkType,
                                                    $type,$version,$maxFee,$signature,$signer);
        $this->setAbstractTransaction($abstractTransaction);

        $this->mosaic = $mosaic;
        $this->duration = $duration;
        $this->signedTransaction = $signedTransaction;
    }

    public function generateBytes() {
        $networkType = $this->getAbstractTransaction()->getNetworkType();
        $version = $this->getAbstractTransaction()->getVersion();
        $deadline = $this->getAbstractTransaction()->getDeadline();
        $signature = $this->getAbstractTransaction()->getSignature();
        $signer = $this->getAbstractTransaction()->getSigner();
        $maxFee = $this->getAbstractTransaction()->getMaxFee();
        $type = $this->getAbstractTransaction()->getType();

        $duration = $this->duration;
        $mosaic = $this->mosaic;
        $signedTransaction = $this->signedTransaction;

        $builder = new FlatbufferBuilder(1);
        
        $v = ($networkType << 24) + $version;
        // Create Vectors
        $signatureVector = LockFundsTransactionBuffer::createSignatureVector($builder, (new Utils)->createArrayZero(64));
        $signerVector = LockFundsTransactionBuffer::createSignerVector($builder, (new Utils)->createArrayZero(32));
        $deadlineVector = LockFundsTransactionBuffer::createDeadlineVector($builder, $deadline->getTimeArray());
        $feeVector = LockFundsTransactionBuffer::createMaxFeeVector($builder, $maxFee);
        $mosaicIdVector = LockFundsTransactionBuffer::createMosaicIdVector($builder, $mosaic->getId());
        $mosaicAmountVector = LockFundsTransactionBuffer::createMosaicAmountVector($builder, $mosaic->getAmount());
        $durationVector = LockFundsTransactionBuffer::createDurationVector($builder, $duration);

        $hashVector = LockFundsTransactionBuffer::createHashVector($builder, (new Hex)->DecodeString($signedTransaction->getHash()));

        $size = self::HEADER_SIZE + 8 + 8 + 8 + 32;

        LockFundsTransactionBuffer::startLockFundsTransactionBuffer($builder);
        LockFundsTransactionBuffer::addSize($builder, $size);
        LockFundsTransactionBuffer::addSignature($builder, $signatureVector);
        LockFundsTransactionBuffer::addSigner($builder, $signerVector);
        LockFundsTransactionBuffer::addVersion($builder, $v);
        LockFundsTransactionBuffer::addType($builder, $type);
        LockFundsTransactionBuffer::addMaxFee($builder, $feeVector);
        LockFundsTransactionBuffer::addDeadline($builder, $deadlineVector);
        LockFundsTransactionBuffer::addMosaicId($builder, $mosaicIdVector);
        LockFundsTransactionBuffer::addMosaicAmount($builder, $mosaicAmountVector);
        LockFundsTransactionBuffer::addDuration($builder, $durationVector);
        LockFundsTransactionBuffer::addHash($builder, $hashVector);

        $codedTransaction = LockFundsTransactionBuffer::endLockFundsTransactionBuffer($builder);
        
        $builder->finish($codedTransaction);
        $LockFundsTransactionSchema = new LockFundsTransactionSchema;

        $tmp = unpack("C*",$builder->sizedByteArray());
        $builder_byte = array_slice($tmp,0,count($tmp));
        $output = $LockFundsTransactionSchema->serialize($builder_byte,0);
        return $output;
    }
}
?>