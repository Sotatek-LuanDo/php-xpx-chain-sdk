<?php
/**
 * NIS2 API
 *
 * This document defines all the nis2 api routes and behaviour
 *
 * OpenAPI spec version: 1.0.0
 * Contact: greg@evias.be
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 * 
 */

namespace Proximax\Model\Transaction;

use Proximax\Model\TransactionType;
use Proximax\Model\Deadline;
use Proximax\Model\TransactionVersion;
use Proximax\Model\TransactionInfo;
use Proximax\Model\PublicAccount;
use Proximax\Infrastructure\Network;
use Proximax\Model\Transaction\Schema\SecretLockTransactionSchema;
use \Google\FlatBuffers\FlatbufferBuilder;
use \Catapult\Buffers\SecretLockTransactionBuffer;
use Proximax\Utils\Utils;
use Proximax\Utils\Hex;
use Proximax\Model\AbstractTransaction;
use Base32\Base32;
/**
 * SecretLockTransaction class Doc Comment
 *
 * @category class
 * @package  Proximax
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SecretLockTransaction extends \Proximax\Model\Transaction{

    private $mosaic; //Mosaic

    private $duration; //bigInt

    private $hashType; //HashAlgorithmEnum

    private $secret; //String

    private $recipient; //Address
     
    public function __construct($deadline, $mosaic, $duration, $hashType, $secret, $recipient, $networkType){
        $version = TransactionVersion::SECRET_LOCK_VERSION;
        $type = hexdec(TransactionType::SECRET_LOCK);
        if (is_string($networkType) && in_array(strtolower($networkType), ["mijin", "mijintest", "public", "publictest", "private", "privatetest", "NotSupportedNet", "aliasaddress"])){
            $networkType = Network::$networkInfos[strtolower($networkType)]["id"];
        }
        else if (is_numeric($networkType) && !in_array($networkType, [96, 144, 184, 168, 200, 176, 0, 145])) {
            throw new NISInvalidNetworkId("Invalid netword ID '" . $networkType . "'");
        } 
        $maxFee = array(0,0);
        $signature = ""; 
        $signer = new PublicAccount;
        $transactionInfo = new TransactionInfo;

        $abstractTransaction = new AbstractTransaction($transactionInfo,$deadline,$networkType,
                                                    $type,$version,$maxFee,$signature,$signer);
        $this->setAbstractTransaction($abstractTransaction);
        $this->mosaic = $mosaic;
        $this->duration = $duration;
        $this->hashType = $hashType;
        $this->secret = $secret;
        $this->recipient = $recipient;
    }

    public function generateBytes() {
        $networkType = $this->getAbstractTransaction()->getNetworkType();
        $version = $this->getAbstractTransaction()->getVersion();
        $deadline = $this->getAbstractTransaction()->getDeadline();
        $signature = $this->getAbstractTransaction()->getSignature();
        $signer = $this->getAbstractTransaction()->getSigner();
        $maxFee = $this->getAbstractTransaction()->getMaxFee();
        $type = $this->getAbstractTransaction()->getType();

        $mosaic = $this->mosaic;
        $duration = $this->duration;
        $hashType = $this->hashType;
        $secret = $this->secret;
        $recipient = $this->recipient;

        $builder = new FlatbufferBuilder(1);

        $v = ($networkType << 24) + $version;
        // Create Vectors
        $signatureVector = SecretLockTransactionBuffer::createSignatureVector($builder, (new Utils)->createArrayZero(64));
        $signerVector = SecretLockTransactionBuffer::createSignerVector($builder, (new Utils)->createArrayZero(32));
        $deadlineVector = SecretLockTransactionBuffer::createDeadlineVector($builder, $deadline->getTimeArray());
        $feeVector = SecretLockTransactionBuffer::createMaxFeeVector($builder, $maxFee);
        
        $mosaicIdVector = SecretLockTransactionBuffer::createMosaicIdVector($builder, $mosaic->getId());
        $mosaicAmountVector = SecretLockTransactionBuffer::createMosaicAmountVector($builder, $mosaic->getAmount());
        $durationVector = SecretLockTransactionBuffer::createDurationVector($builder, $duration);
        $secretVector = SecretLockTransactionBuffer::createSecretVector($builder, (new Hex)->DecodeString($secret));
        
        $tmp = Base32::decode($recipient->toClean());
        $address = (new Utils)->stringToByteArray($tmp);
        $recipientVector = SecretLockTransactionBuffer::createRecipientVector($builder, $address);
        
        // header + mosaicID, amount, duration, hash algo, secret, recipient
        $size = self::HEADER_SIZE + 8 + 8 + 8 + 1 + 32 + 25;

        SecretLockTransactionBuffer::startSecretLockTransactionBuffer($builder);
        SecretLockTransactionBuffer::addSize($builder, $size);
        SecretLockTransactionBuffer::addSignature($builder, $signatureVector);
        SecretLockTransactionBuffer::addSigner($builder, $signerVector);
        SecretLockTransactionBuffer::addVersion($builder, $v);
        SecretLockTransactionBuffer::addType($builder, $type);
        SecretLockTransactionBuffer::addMaxFee($builder, $feeVector);
        SecretLockTransactionBuffer::addDeadline($builder, $deadlineVector);
        
        SecretLockTransactionBuffer::addMosaicId($builder, $mosaicIdVector);
        SecretLockTransactionBuffer::addMosaicAmount($builder, $mosaicAmountVector);
        SecretLockTransactionBuffer::addDuration($builder, $durationVector);
        SecretLockTransactionBuffer::addHashAlgorithm($builder, $hashType);
        SecretLockTransactionBuffer::addSecret($builder, $secretVector);
        SecretLockTransactionBuffer::addRecipient($builder, $recipientVector);
        
        $codedTransaction = SecretLockTransactionBuffer::endSecretLockTransactionBuffer($builder);
        
        $builder->finish($codedTransaction);
        $SecretLockTransactionSchema = new SecretLockTransactionSchema;
        $tmp = unpack("C*",$builder->sizedByteArray());
        $builder_byte = array_slice($tmp,0,count($tmp));
        $output = $SecretLockTransactionSchema->serialize($builder_byte);
        return $output;
    }
}
?>