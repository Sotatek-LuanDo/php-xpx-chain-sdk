<?php
/**
 * NIS2 API
 *
 * This document defines all the nis2 api routes and behaviour
 *
 * OpenAPI spec version: 1.0.0
 * Contact: greg@evias.be
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 * 
 */

namespace NEM\Model;
use NEM\Utils\Utils;

/**
 * Deadline class Doc Comment
 *
 * @category class
 * @package  NEM
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Deadline{
    const TimeBegin = 1459468800000;

    private $time; //DateTime

    public function __construct($addTime = null){
        $time = new \DateTime();
        if ($addTime === null){
            $interval = 'PT' . 2 . 'H'; //default 2 hours
            $time->add(new \DateInterval($interval));
        }
        else if ($addTime !== null){
            if ($addTime <= 0 || $addTime >= 24){
                throw new \Exception("Deadline is between 0 and 24 hours");
            }
            else{
                $interval = 'PT' . $addTime . 'H'; //unit hour
                $time->add(new \DateInterval($interval));
            }
        }    
        $this->time = $time;
    }

    private function getInstant($time){
        $timeBegin = self::TimeBegin;
        return $time - $timeBegin;
    }

    public function getDate(){
        return $this->time->format("Y-m-d H:i:s.u O");
    }

    public function getTimestamp(){
        return date_timestamp_get($this->time)*1000;
    }
    
    public function getTimeArray(){
        $tmp = $this->getInstant($this->getTimestamp());
        $utils = new Utils;
        return $utils->fromBigInt($tmp);
    }

    public function createDeadlineByTimestamp($sub_timestamp){
        $timestamp = ($sub_timestamp + self::TimeBegin)/1000;
        $time = new \DateTime();
        $time->setTimestamp($timestamp);
        $this->time = $time;
        return $this;
    }
}

?>