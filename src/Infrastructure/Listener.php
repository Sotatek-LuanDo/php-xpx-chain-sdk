<?php
/**
 * NIS2 API
 *
 * This document defines all the nis2 api routes and behaviour
 *
 * OpenAPI spec version: 1.0.0
 * Contact: greg@evias.be
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 * 
 */

namespace Proximax\Infrastructure;
use Proximax\Infrastructure\Listener\ListenerChannel;
use Amp\Websocket;
use Amp\Loop;
use Proximax\Infrastructure\Listener\BlockChannelMessage;

/**
 * Listener class Doc Comment
 *
 * @category class
 * @package  Proximax
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Listener{

    public function newBlock($host,$port,$callback = null) {
        $channel = ListenerChannel::BLOCK;
        Loop::run(function () use ($host, $port, $channel, $callback){
            $connection = yield Websocket\connect('ws://' . $host . ':' . $port . '/ws');
        
            $message = yield $connection->receive();
            $payload = yield $message->buffer();
            $uid = json_decode($payload)->uid;

            $data = $this->subscribeTo($uid, $channel);

            $connection->send($data);
            $continue = true;
            while ($continue){      
                $message = yield $connection->receive();
                $payload = yield $message->buffer();
                if ($callback !== null){
                    $blockChannelMessage = new BlockChannelMessage($payload);
                    $continue = $callback($blockChannelMessage);
                }
            }
        });
    }
 
    public function confirmed($host,$port,$address,$callback = null) {
        $channel = ListenerChannel::CONFIRMED_ADDED;
        Loop::run(function () use ($host, $port, $channel, $address, $callback){
            $connection = yield Websocket\connect('ws://' . $host . ':' . $port . '/ws');
        
            $message = yield $connection->receive();
            $payload = yield $message->buffer();
            $uid = json_decode($payload)->uid;

            $data = $this->subscribeTo($uid, $channel . "/" .$address);

            $connection->send($data);
            $continue = true;
            while ($continue){      
                $message = yield $connection->receive();
                $payload = yield $message->buffer();
                if ($callback !== null){
                    $continue = $callback($payload);
                }
            }
        });
    }
 
    public function unconfirmedAdded($host,$port,$address,$callback = null) {
        $channel = ListenerChannel::UNCONFIRMED_ADDED;
        Loop::run(function () use ($host, $port, $channel, $address, $callback){
            $connection = yield Websocket\connect('ws://' . $host . ':' . $port . '/ws');
        
            $message = yield $connection->receive();
            $payload = yield $message->buffer();
            $uid = json_decode($payload)->uid;

            $data = $this->subscribeTo($uid, $channel . "/" .$address);

            $connection->send($data);
            $continue = true;
            while ($continue){      
                $message = yield $connection->receive();
                $payload = yield $message->buffer();
                if ($callback !== null){
                    $continue = $callback($payload);
                }
            }
        });
    }
 
    public function unconfirmedRemoved($host,$port,$address,$callback = null) {
        $channel = ListenerChannel::UNCONFIRMED_REMOVED;
        Loop::run(function () use ($host, $port, $channel, $address, $callback){
            $connection = yield Websocket\connect('ws://' . $host . ':' . $port . '/ws');
        
            $message = yield $connection->receive();
            $payload = yield $message->buffer();
            $uid = json_decode($payload)->uid;

            $data = $this->subscribeTo($uid, $channel . "/" .$address);

            $connection->send($data);
            $continue = true;
            while ($continue){      
                $message = yield $connection->receive();
                $payload = yield $message->buffer();
                if ($callback !== null){
                    $continue = $callback($payload);
                }
            }
        });
    }
 
    public function aggregateBondedAdded($host,$port,$address,$callback = null) {
        $channel = ListenerChannel::AGGREGATE_BONDED_ADDED;
        Loop::run(function () use ($host, $port, $channel, $address, $callback){
            $connection = yield Websocket\connect('ws://' . $host . ':' . $port . '/ws');
        
            $message = yield $connection->receive();
            $payload = yield $message->buffer();
            $uid = json_decode($payload)->uid;

            $data = $this->subscribeTo($uid, $channel . "/" .$address);

            $connection->send($data);
            $continue = true;
            while ($continue){      
                $message = yield $connection->receive();
                $payload = yield $message->buffer();
                if ($callback !== null){
                    $continue = $callback($payload);
                }
            }
        });
    }
 
    public function aggregateBondedRemoved($host,$port,$address,$callback = null) {
       $channel = ListenerChannel::AGGREGATE_BONDED_REMOVED;
        Loop::run(function () use ($host, $port, $channel, $address, $callback){
            $connection = yield Websocket\connect('ws://' . $host . ':' . $port . '/ws');
        
            $message = yield $connection->receive();
            $payload = yield $message->buffer();
            $uid = json_decode($payload)->uid;

            $data = $this->subscribeTo($uid, $channel . "/" .$address);

            $connection->send($data);
            $continue = true;
            while ($continue){      
                $message = yield $connection->receive();
                $payload = yield $message->buffer();
                if ($callback !== null){
                    $continue = $callback($payload);
                }
            }
        });
    }
 
    public function status($host,$port,$address,$callback = null) {
        $channel = ListenerChannel::STATUS;
        Loop::run(function () use ($host, $port, $channel, $address, $callback){
            $connection = yield Websocket\connect('ws://' . $host . ':' . $port . '/ws');
        
            $message = yield $connection->receive();
            $payload = yield $message->buffer();
            $uid = json_decode($payload)->uid;

            $data = $this->subscribeTo($uid, $channel . "/" .$address);

            $connection->send($data);
            $continue = true;
            while ($continue){      
                $message = yield $connection->receive();
                $payload = yield $message->buffer();
                if ($callback !== null){
                    $continue = $callback($payload);
                }
            }
        });
    }
 
    public function cosignatureAdded($host,$port,$address,$callback = null) {
        $channel = ListenerChannel::COSIGNATURE;
        Loop::run(function () use ($host, $port, $channel, $address, $callback){
            $connection = yield Websocket\connect('ws://' . $host . ':' . $port . '/ws');
        
            $message = yield $connection->receive();
            $payload = yield $message->buffer();
            $uid = json_decode($payload)->uid;

            $data = $this->subscribeTo($uid, $channel . "/" .$address);

            $connection->send($data);
            $continue = true;
            while ($continue){      
                $message = yield $connection->receive();
                $payload = yield $message->buffer();
                if ($callback !== null){
                    $continue = $callback($payload);
                }
            }
        });
    }

    public function subscribeTo($uid, $channel){
        $subscriptionMessage = new \stdClass();
        $subscriptionMessage->uid = $uid;
        $subscriptionMessage->subscribe = $channel;

        return json_encode($subscriptionMessage);
    }

    public function unsubscribeTo($uid, $channel){
        $subscriptionMessage = new \stdClass();
        $subscriptionMessage->uid = $uid;
        $subscriptionMessage->unsubscribe = $channel;

        return json_encode($subscriptionMessage);
    }
}