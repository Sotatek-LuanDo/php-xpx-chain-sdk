<?php
/**
 * NIS2 API
 *
 * This document defines all the nis2 api routes and behaviour
 *
 * OpenAPI spec version: 1.0.0
 * Contact: greg@evias.be
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 * 
 */

namespace NEM\Utils;

/**
 * Utils Class Doc Comment
 *
 * @category Class
 * @package  NEM
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Utils{

    public $hex;

    public function __construct(){
        $this->hex = new Hex();
    }

    /**
     * ReverseByteArray rearranges the bytes in reverse order
     *
     * @param  byte array $a
     *
     * @return byte array $a
     */
    public function ReverseByteArray($a) {
        $lenA = count($a);
        $j = $lenA;

        for ($i=0;$i<$lenA/2;$i++) {
            $j--;
            $temp = $a[$i];
            $a[$i] = $a[$j];
            $a[$j] = $temp;
        }
        return $a;
    }

    
    /**
     * MustHexDecodeString return hex representation of string
     *
     * @param  String $s
     *
     * @return byte array $b
     */
    public function MustHexDecodeString($s){
        $b = $this->hex->DecodeString($s);
        return $b;
    }

    /**
     * HexDecodeStringOdd return padding hex representation of string
     *
     * @param  String $s
     *
     * @return byte array $b
     */
    public function HexDecodeStringOdd($s){
        if (count($s)%2 != 0) {
            $s = "0" + $s;
        }
        return $this->hex->DecodeString($s);
    }

    public function fromBigInt($int){
        if ($int == null) {
            return array(0, 0);
        }
        $l = $int & 0xFFFFFFFF;
        $r = ($int >> 32) & 0xFFFFFFFF;
        return array($l, $r);
    }

    public function bigIntToHexString(array $arr){
       $str = dechex(($arr[1] << 32) | $arr[0]);
       if (strlen($str) < 16){
           for ($i=0;$i<16-strlen($str);$i++){
               $str = "0" . $str;
           }
       }
       return $str;
    }

    public function intToArray($int){
        if ($int == null) {
            return array(0, 0);
        }
        $p1 = ($int >> 24) & 0xFF;
        $p2 = ($int >> 16) & 0xFF;
        $p3 = ($int >> 8) & 0xFF;
        $p4 = $int & 0xFF;
        return array($p1, $p2, $p3, $p4);
    }

    public function createArrayZero($num){
        for ($i=0;$i<$num;$i++){
            $array[$i] = 0;
        }
        return $array;
    }

    public function stringToByteArray($string){
        $tmp = unpack('C*', $string);
        $array = array_slice($tmp,0,count($tmp));
        return $array;
    }

    /**
     * @param int $num is string input
     * 
     * @param int $frombase is type origin input
     * 
     * @param int $tobase is type output need
     */
    public function improve_base_convert($num, $frombase, $tobase){
        $numstring = "";
        while($num >= 1){
            $char = $num % 10;
            var_dump((string)$char);
            $numstring = (string)$char . $numstring;
            $num = $num / 10;
        }
        var_dump("day ne");
        var_dump($numstring);
        $chars = "0123456789abcdefghijklmnopqrstuvwxyz";
        $tostring = substr($chars, 0, $tobase);
    
        $length = strlen($numstring);
        $result = '';
        for ($i = 0; $i < $length; $i++){
            $number[$i] = strpos($chars, $numstring{$i});
        }
        do{
            $divide = 0;
            $newlen = 0;
            for ($i = 0; $i < $length; $i++){
                $divide = $divide * $frombase + $number[$i];
                if ($divide >= $tobase){
                    $number[$newlen++] = (int)($divide / $tobase);
                    $divide = $divide % $tobase;
                } 
                elseif ($newlen > 0){
                    $number[$newlen++] = 0;
                }
            }
            $length = $newlen;
            $result = $tostring{$divide} . $result;
        } 
        while ($newlen != 0);

        return $result;
    }

    public function uint32LittleEndian($arr){
        return ($arr[3] << 24) | ($arr[2] << 16) | ($arr[1] << 8) | ($arr[0]);
    }
}
?>